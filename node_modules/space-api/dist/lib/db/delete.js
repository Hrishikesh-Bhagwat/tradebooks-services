"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var db = require('./db');

var utils = require('../utils'),
    fetchAsync = utils.fetchAsync,
    and = utils.and;
/**
 * Class representing the DB Delete Interface.
 * @example 
 * import { API, cond, or, and } from 'space-api';
 * 
 * const api = new API('my-project', 'localhost:4122');
 * const db = api.DB("mongo");
 * 
 * db.delete('posts').where(and(cond('title', '==', 'Title1'))).all().then(res => {
 *   if (res.status === 200) {
 *     // The documents were deleted successfully
 *     return;
 *   }
 * }).catch(ex => {
 *   // Exception occured while processing request
 * });
 */


var Delete =
/*#__PURE__*/
function () {
  /**
   * Create an instance of the DB Delete Interface.
   * @param {string} appId 
   * @param {string} collection 
   * @param {string} url 
   * @param {Object} options 
   * @param {string} db 
   * @param {string} op 
   */
  function Delete(appId, collection, url, options, db, op) {
    _classCallCheck(this, Delete);

    this.appId = appId;
    this.collection = collection;
    this.url = url;
    this.db = db;
    this.options = Object.assign({}, options, {
      method: 'POST'
    });
    this.params = {
      find: {}
    };
    this.params.op = op;
    this.type = 'delete';
  }
  /**
   * Prepares the find query
   * @param {...Object} conditions - The condition logic.
   */


  _createClass(Delete, [{
    key: "where",
    value: function where() {
      this.params.find = db.generateFind(and.apply(void 0, arguments));
      return this;
    }
    /**
     * Makes the query to delete a single document which matches first. 
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * db.delete('posts').one().then(res => ...)
     * @deprecated Since version 0.4.3. Will be deleted in version 1.0.0. Use apply instead.
     */

  }, {
    key: "one",
    value: function one() {
      this.params.op = 'one';
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/delete"));
      return fetchAsync(url, this.options);
    }
    /**
     * Makes the query to delete all the documents which match. 
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * db.delete('posts').all().then(res => ...)
     * @deprecated Since version 0.4.3. Will be deleted in version 1.0.0. Use apply instead.
     */

  }, {
    key: "all",
    value: function all() {
      this.params.op = 'all';
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/delete"));
      return fetchAsync(url, this.options);
    }
    /**
     * Makes the query to delete all the documents which match. 
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * db.delete('posts').apply().then(res => ...)
     */

  }, {
    key: "apply",
    value: function apply() {
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/delete"));
      return fetchAsync(url, this.options);
    }
  }]);

  return Delete;
}();

module.exports = Delete;