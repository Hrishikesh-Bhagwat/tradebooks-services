"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var db = require('./db');

var utils = require('../utils'),
    fetchAsync = utils.fetchAsync;
/**
 * Class representing the DB Insert Interface.
 * @example 
 * import { API, cond, or, and } from 'space-api';
 * 
 * const api = new API('my-project', 'http://localhost:4122');
 * const db = api.DB("mongo");
 * 
 * const doc = { author: 'John', title: 'Title1', _id: 1 };
 * db.insert('posts').one(doc).then(res => {
 *   if (res.status === 200) {
 *     // Document was inserted successfully
 *     return;
 *   }
 * }).catch(ex => {
 *   // Exception occured while processing request
 * });
 */


var Insert =
/*#__PURE__*/
function () {
  /**
   * Create an instance of the DB Insert Interface.
   * @param {string} appId 
   * @param {string} collection 
   * @param {string} url 
   * @param {Object} options 
   * @param {string} db 
   */
  function Insert(appId, collection, url, options, db) {
    _classCallCheck(this, Insert);

    this.appId = appId;
    this.collection = collection;
    this.url = url;
    this.db = db;
    this.options = Object.assign({}, options, {
      method: 'POST'
    });
    this.params = {};
    this.type = 'create';
  }
  /**
   * Makes the query to insert a single document. 
   * @param {Object} doc - The document to be inserted.
   * @returns {Promise} Returns a promise containing response from server.
   * @example
   * const doc = { author: 'John', title: 'Title1', _id: 1 };
   * db.insert('posts').one(doc).then(res => ...)
   * @deprecated Since version 0.4.3. Will be deleted in version 1.0.0. Use doc and apply instead.
   */


  _createClass(Insert, [{
    key: "one",
    value: function one(doc) {
      this.params.doc = doc;
      this.params.op = 'one';
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/create"));
      return fetchAsync(url, this.options);
    }
    /**
     * Makes the query to insert multiple documents. 
     * @param {Object[]} docs - The documents to be inserted.
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * const docs = [{ author: 'John', title: 'Title1', _id: 1 }];
     * db.insert('posts').all(docs).then(res => ...)
     * @deprecated Since version 0.4.3. Will be deleted in version 1.0.0. Use docs and apply instead.
     */

  }, {
    key: "all",
    value: function all(docs) {
      this.params.doc = docs;
      this.params.op = 'all';
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/create"));
      return fetchAsync(url, this.options);
    }
    /**
     * Makes the query to insert multiple documents. 
     * @param {Object[]} docs - The documents to be inserted.
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * const docs = [{ author: 'John', title: 'Title1', _id: 1 }];
     * db.insert('posts').docs(docs).apply().then(res => ...)
     */

  }, {
    key: "apply",
    value: function apply() {
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "".concat(this.collection, "/create"));
      return fetchAsync(url, this.options);
    }
    /**
     * Accepts the documents to be inserted. 
     * @param {Object[]} docs - The documents to be inserted.
     */

  }, {
    key: "docs",
    value: function docs(_docs) {
      this.params.op = 'all';
      this.params.doc = _docs;
      return this;
    }
    /**
     * Accepts the document to be inserted. 
     * @param {Object[]} doc - The document to be inserted.
     */

  }, {
    key: "doc",
    value: function doc(_doc) {
      this.params.op = 'one';
      this.params.doc = _doc;
      return this;
    }
  }]);

  return Insert;
}();

module.exports = Insert;