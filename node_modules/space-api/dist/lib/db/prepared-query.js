"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var db = require('./db');

var utils = require('../utils'),
    fetchAsync = utils.fetchAsync;
/**
 * Class representing the Prepared Query Interface.
 * @example 
 * import { API } from 'space-api';
 * 
 * const api = new API('my-project', 'localhost:4122');
 * const db = api.DB("mongo");
 * 
 * db.preparedQuery('myPreparedQuery').args({ "foo": "bar" }).apply().then(res => {
 *   if (res.status === 200) {
 *     // The prepared query was executed successfully
 *     console.log("Data", res.data)
 *     return;
 *   }
 * }).catch(ex => {
 *   // Exception occured while processing request
 * });
 */


var PreparedQuery =
/*#__PURE__*/
function () {
  /**
   * Create an instance of the Prepared Query Interface.
   * @param {string} appId 
   * @param {string} id 
   * @param {string} url 
   * @param {Object} options 
   * @param {string} db 
   */
  function PreparedQuery(appId, id, url, options, db) {
    _classCallCheck(this, PreparedQuery);

    this.appId = appId;
    this.id = id;
    this.url = url;
    this.db = db;
    this.options = Object.assign({}, options, {
      method: 'POST'
    });
    this.params = {
      params: {}
    };
  }
  /**
   * Prepares the args object
   * @param {Object} args - The args object.
   */


  _createClass(PreparedQuery, [{
    key: "args",
    value: function args(argsObject) {
      this.params.params = argsObject;
      return this;
    }
    /**
     * Executes the prepared query. 
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * db.preparedQuery('myPreparedQuery').args({ "foo": "bar" }).apply().then(res => ...)
     */

  }, {
    key: "apply",
    value: function apply() {
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', "prepared-queries/".concat(this.id));
      return fetchAsync(url, this.options);
    }
  }]);

  return PreparedQuery;
}();

module.exports = PreparedQuery;