"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var db = require('./db');

var utils = require('../utils'),
    fetchAsync = utils.fetchAsync;

var Batch =
/*#__PURE__*/
function () {
  function Batch(appId, url, options, db) {
    _classCallCheck(this, Batch);

    this.appId = appId;
    this.url = url;
    this.db = db;
    this.options = Object.assign({}, options, {
      method: 'POST'
    });
    this.params = {
      reqs: []
    };
  }
  /**
   * Adds a request to the batch. 
   * @param {Object} req - The request to batch.
   */


  _createClass(Batch, [{
    key: "add",
    value: function add(req) {
      this.params.reqs.push(Object.assign({}, req.params, {
        col: req.collection,
        type: req.type
      }));
      return this;
    }
    /**
     * Executes the batch operations. 
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * const batch = db.beginBatch()
     * batch.add(db.insert("todos").doc({_id: "1", todo: "Star Space Cloud"}))
     * batch.add(db.insert("todos").doc({_id: "2", todo: "Fork Space Cloud"}))
     * batch.apply().then(res => console.log("Response", res))
     */

  }, {
    key: "apply",
    value: function apply() {
      this.options.body = JSON.stringify(this.params);
      var url = db.dbURL(this.url, this.db, this.appId, 'crud', 'batch');
      return fetchAsync(url, this.options);
    }
  }]);

  return Batch;
}();

module.exports = Batch;