"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fetchAsync = require("../utils").fetchAsync;

var FormData = require("form-data");

var FileStore =
/*#__PURE__*/
function () {
  /**
   * Create an instance of the FileStore Interface.
   * @param {string} appId
   * @param {string} url
   * @param {Object} options
   */
  function FileStore(appId, url, options) {
    _classCallCheck(this, FileStore);

    this.appId = appId;
    this.url = url;
    this.options = options;
    delete this.options.headers["Content-Type"];
  }
  /**
   * Uploads the given file at given path.
   * @param {string} path
   * @param {file} file
   * @param {string} name
   * @returns {Promise} Returns a promise containing response from server.
   * @example
   * const fileInput = document.querySelector('#your-file-input');
   * api.FileStore().uploadFile("/some-path", fileInput.files[0]).then(res => {
   *   if (res.status === 200) {
   *     console.log("File uploaded successfully");
   *   }
   * })
   */


  _createClass(FileStore, [{
    key: "uploadFile",
    value: function uploadFile(path, file, name) {
      var formData = new FormData();
      formData.append("file", file);
      formData.append("fileType", "file");
      formData.append("path", path);
      formData.append("makeAll", "true");

      if (name) {
        formData.append("fileName", name);
      }

      var url = "".concat(this.url, "v1/api/").concat(this.appId, "/files");
      return fetchAsync(url, Object.assign({}, this.options, {
        method: "POST",
        body: formData
      }));
    }
    /**
     * Creates a folder with given name at given path.
     * @param {string} path
     * @param {string} name
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * api.FileStore().createFolder("/some-path", "my-folder").then(res => {
     *   if (res.status === 200) {
     *     console.log("Folder created successfully");
     *   }
     * })
     */

  }, {
    key: "createFolder",
    value: function createFolder(path, name) {
      var formData = new FormData();
      formData.append("fileType", "folder");
      formData.append("path", path);
      formData.append("name", name);
      formData.append("makeAll", "true");
      var url = "".concat(this.url, "v1/api/").concat(this.appId, "/files");
      return fetchAsync(url, Object.assign({}, this.options, {
        method: "POST",
        body: formData
      }));
    }
    /**
     * Returns list of files within a directory.
     * @param {string} path
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * api.FileStore().listFiles("/some-path").then(res => ...)
     */

  }, {
    key: "listFiles",
    value: function listFiles(path) {
      var url = "".concat(this.url, "v1/api/").concat(this.appId, "/files/").concat(path, "?op=list&mode=all");
      return fetchAsync(url, Object.assign({}, this.options, {
        method: "GET"
      }));
    }
    /**
     * Deletes a file / folder at given path.
     * @param {string} path
     * @returns {Promise} Returns a promise containing response from server.
     * @example
     * api.FileStore().delete("/some-path").then(res => {
     *   if (res.status === 200) {
     *     console.log("Deleted successfully");
     *   }
     * })
     */

  }, {
    key: "delete",
    value: function _delete(path) {
      var url = "".concat(this.url, "v1/api/").concat(this.appId, "/files/").concat(path, "?fileType=file");
      return fetchAsync(url, Object.assign({}, this.options, {
        method: "DELETE"
      }));
    }
  }, {
    key: "deleteFolder",
    value: function deleteFolder(path) {
      var url = "".concat(this.url, "v1/api/").concat(this.appId, "/files/").concat(path, "?fileType=dir");
      return fetchAsync(url, Object.assign({}, this.options, {
        method: "DELETE"
      }));
    }
  }]);

  return FileStore;
}();

module.exports = FileStore;