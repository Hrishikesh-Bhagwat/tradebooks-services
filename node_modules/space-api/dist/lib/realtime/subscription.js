"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Class representing the LiveQuerySubscription Interface.
 * 
 */
var LiveQuerySubscription =
/*#__PURE__*/
function () {
  /** 
   *  The function to unsubscribe the subscription
   *  @name Unsubscribe
   *  @function
   */

  /**
   * Create an instance of the LiveQuerySubscription Interface.
   * @param {Unsubscribe} unsubscribeFunc The function to unsubscribe the liveQuery
   * @param {Array} snapshot The initial snapshot
   */
  function LiveQuerySubscription(unsubscribeFunc, snapshot) {
    _classCallCheck(this, LiveQuerySubscription);

    this.unsubscribeFunc = unsubscribeFunc;
    this.snapshot = snapshot;
  }
  /**
   * Gets the snapshot
   * @returns {Array} snapshot - The current snapshot
   */


  _createClass(LiveQuerySubscription, [{
    key: "getSnapshot",
    value: function getSnapshot() {
      return this.snapshot;
    }
    /**
     * Unsubscribes from the liveQuery
     */

  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      this.unsubscribeFunc();
    }
  }]);

  return LiveQuerySubscription;
}();

module.exports = LiveQuerySubscription;