"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LiveQuery = require('./liveQuery');

var snapshotCallback = require('./helper').snapshotCallback;

var Realtime =
/*#__PURE__*/
function () {
  function Realtime(appId, client) {
    var _this = this;

    _classCallCheck(this, Realtime);

    this.appId = appId;
    this.client = client;
    this.store = {};
    this.client.registerOnReconnectCallback(function () {
      Object.keys(_this.store).forEach(function (db) {
        Object.keys(_this.store[db]).forEach(function (col) {
          Object.keys(_this.store[db][col]).forEach(function (id) {
            var obj = _this.store[db][col][id];

            var q = _this.liveQuery(db, col);

            q.find = obj.find;
            q.opts = obj.opts;
            q.subscribeRaw(id, obj.subscription.onSnapshot, obj.subscription.onError);
          });
        });
      });
    });
    this.client.registerCallback('realtime-feed', function (data) {
      snapshotCallback(_this.store, [data]);
    });
  }

  _createClass(Realtime, [{
    key: "liveQuery",
    value: function liveQuery(db, collection) {
      return new LiveQuery(this.appId, db, collection, this.client, this.store);
    }
  }]);

  return Realtime;
}();

module.exports = Realtime;