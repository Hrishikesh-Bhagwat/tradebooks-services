"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

exports.snapshotCallback = function (store, rows) {
  if (!rows || rows.length === 0) return;
  var obj = {};
  var opts = {};
  rows.forEach(function (data) {
    obj = store[data.dbType][data.group][data.id];

    if (obj) {
      opts = obj.opts;

      if (data.type === 'initial') {
        obj.snapshot.push({
          find: data.find,
          time: data.time,
          payload: data.payload,
          isDeleted: false
        });
      } else if (data.type === 'insert' || data.type === 'update') {
        var isExisting = false;
        obj.snapshot = obj.snapshot.map(function (row) {
          if (matchFindClause(row.payload, data.find)) {
            isExisting = true;
            if (row.time <= data.time) return Object.assign(row, {
              time: data.time,
              payload: data.payload,
              isDeleted: false
            });
          }

          return row;
        });
        if (!isExisting) obj.snapshot.push({
          find: data.find,
          time: data.time,
          payload: data.payload,
          isDeleted: false
        });
      } else if (data.type === 'delete') {
        obj.snapshot = obj.snapshot.map(function (row) {
          if (matchFindClause(row.payload, data.find) && row.time <= data.time) return Object.assign(row, {
            time: data.time,
            payload: {},
            isDeleted: true
          });
          return row;
        });
      }

      var changeType = rows[0].type;

      if (changeType === 'initial') {
        if (!opts.skipInitial) {
          obj.subscriptionObject.snapshot = obj.snapshot.filter(function (row) {
            return !row.isDeleted;
          }).map(function (row) {
            return row.payload;
          });
          obj.subscription.onSnapshot(obj.subscriptionObject.snapshot, changeType);
        }
      } else {
        if (changeType !== 'delete') {
          obj.subscriptionObject.snapshot = obj.snapshot.filter(function (row) {
            return !row.isDeleted;
          }).map(function (row) {
            return row.payload;
          });
          obj.subscription.onSnapshot(obj.subscriptionObject.snapshot, changeType, rows[0].find, rows[0].payload);
        } else {
          obj.subscriptionObject.snapshot = obj.snapshot.filter(function (row) {
            return !row.isDeleted;
          }).map(function (row) {
            return row.payload;
          });
          obj.subscription.onSnapshot(obj.subscriptionObject.snapshot, changeType, rows[0].find);
        }
      }
    }
  });
};

var matchFindClause = function matchFindClause(obj, find) {
  return Object.entries(find).every(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return obj[key] == value;
  });
};