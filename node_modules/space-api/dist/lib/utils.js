"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var fetch = require("node-fetch"); // Fetch asynchronuosly


exports.fetchAsync = function (url, options) {
  return new Promise(function (resolve, reject) {
    fetch(url, options).then(function (response) {
      var status = response.status;
      response.json().then(function (data) {
        resolve({
          status: status,
          data: data
        });
      }).catch(function (error) {
        reject(error);
      });
    }).catch(function (error) {
      reject(error);
    });
  });
};

exports.cond = function (f1, op, f2) {
  return {
    type: "cond",
    f1: f1,
    op: op,
    f2: f2
  };
};

exports.and = function () {
  for (var _len = arguments.length, conditions = new Array(_len), _key = 0; _key < _len; _key++) {
    conditions[_key] = arguments[_key];
  }

  return {
    type: "and",
    clauses: conditions
  };
};

exports.or = function () {
  for (var _len2 = arguments.length, conditions = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    conditions[_key2] = arguments[_key2];
  }

  return {
    type: "or",
    clauses: conditions
  };
};

exports.generateId = function () {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == "x" ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

var validate = function validate(find, obj) {
  var keys = Object.keys(find);
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    var key = keys[i];

    if (key === "$or") {
      var objs = Object.keys(find[key]);
      var _len3 = objs.length;

      for (var j = 0; j < _len3; j++) {
        // If any one condition gets satisfied return true
        if (validate(objs[j], obj)) return true;
      } // Return false if no condition is matched


      return false;
    } // Return false if the obj does not contain the required field


    if (!loadValue(obj, key).found) return false;
    if (_typeof(find[key]) !== "object") return loadValue(find, key).value === loadValue(obj, key).value;
    var subKeys = Object.keys(find[key]);
    var len1 = subKeys.length;

    for (var _j = 0; _j < len1; _j++) {
      var subKey = subKeys[_j];
      var val1 = loadValue(obj, key);
      var val2 = find[key][subKey];

      switch (subKey) {
        case "$eq":
          if (val1 !== val2) return false;
          break;

        case "$neq":
          if (val1 === val2) return false;
          break;

        case "$gt":
          if (val1 <= val2) return false;
          break;

        case "$gte":
          if (val1 < val2) return false;
          break;

        case "$lt":
          if (val1 >= val2) return false;
          break;

        case "$lte":
          if (val1 > val2) return false;
          break;

        case "default":
          return false;
      }
    }
  }

  return true;
};

var loadValue = function loadValue(state, key) {
  var keys = key.split(".");
  var result = {
    found: false,
    value: undefined
  };
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    if (state === undefined || state === null || !isObject(state) || !state.hasOwnProperty(keys[i])) {
      break;
    }

    if (i === len - 1) result = {
      found: true,
      value: state[keys[i]]
    };else state = state[keys[i]];
  }

  return result;
};

var storeValue = function storeValue(state, key, value) {
  var keys = key.split(".");
  var ok = true;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    if (!state.hasOwnProperty(keys[i])) {
      ok = false;
      break;
    }

    if (i === len - 1) state[keys[i]] = value;else state = state[keys[i]];
  }

  return ok;
};

var isObject = function isObject(value) {
  return value && _typeof(value) === "object" && value.constructor === Object;
};

exports.loadValue = loadValue;
exports.storeValue = storeValue;
exports.validate = validate;